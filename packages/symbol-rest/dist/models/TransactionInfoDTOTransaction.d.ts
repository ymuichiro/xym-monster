import type { AccountRestrictionFlagsEnum } from './AccountRestrictionFlagsEnum';
import type { AliasActionEnum } from './AliasActionEnum';
import type { CosignatureDTO } from './CosignatureDTO';
import type { EmbeddedTransactionInfoDTO } from './EmbeddedTransactionInfoDTO';
import type { LinkActionEnum } from './LinkActionEnum';
import type { LockHashAlgorithmEnum } from './LockHashAlgorithmEnum';
import type { MosaicRestrictionTypeEnum } from './MosaicRestrictionTypeEnum';
import type { MosaicSupplyChangeActionEnum } from './MosaicSupplyChangeActionEnum';
import type { NamespaceRegistrationTypeEnum } from './NamespaceRegistrationTypeEnum';
import type { NetworkTypeEnum } from './NetworkTypeEnum';
import type { TransactionTypeEnum } from './TransactionTypeEnum';
import type { UnresolvedMosaic } from './UnresolvedMosaic';
export interface TransactionInfoDTOTransaction {
    size: number;
    signature: string;
    signerPublicKey: string;
    version: number;
    network: NetworkTypeEnum;
    type: number;
    maxFee: string;
    deadline: string;
    linkedPublicKey: string;
    linkAction: LinkActionEnum;
    startEpoch: number;
    endEpoch: number;
    transactionsHash: string;
    cosignatures: Array<CosignatureDTO>;
    transactions: Array<EmbeddedTransactionInfoDTO>;
    mosaicId: string;
    amount: string;
    duration: string;
    hash: string;
    recipientAddress: string;
    secret: string;
    hashAlgorithm: LockHashAlgorithmEnum;
    proof: string;
    targetAddress: string;
    scopedMetadataKey: string;
    valueSizeDelta: number;
    valueSize: number;
    value: string;
    targetMosaicId: string;
    targetNamespaceId?: string;
    id: string;
    nonce: number;
    flags: number;
    divisibility: number;
    delta: string;
    action: MosaicSupplyChangeActionEnum;
    sourceAddress: string;
    parentId?: string;
    registrationType: NamespaceRegistrationTypeEnum;
    name: string;
    namespaceId: string;
    address: string;
    aliasAction: AliasActionEnum;
    minRemovalDelta: number;
    minApprovalDelta: number;
    addressAdditions: Array<string>;
    addressDeletions: Array<string>;
    restrictionFlags: AccountRestrictionFlagsEnum;
    restrictionAdditions?: Array<TransactionTypeEnum>;
    restrictionDeletions?: Array<TransactionTypeEnum>;
    referenceMosaicId: string;
    restrictionKey: string;
    previousRestrictionValue: string;
    newRestrictionValue: string;
    previousRestrictionType: MosaicRestrictionTypeEnum;
    newRestrictionType: MosaicRestrictionTypeEnum;
    mosaics: Array<UnresolvedMosaic>;
    message?: string;
}
export declare function instanceOfTransactionInfoDTOTransaction(value: object): boolean;
export declare function TransactionInfoDTOTransactionFromJSON(json: any): TransactionInfoDTOTransaction;
export declare function TransactionInfoDTOTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionInfoDTOTransaction;
export declare function TransactionInfoDTOTransactionToJSON(value?: TransactionInfoDTOTransaction | null): any;
